# Type definitions
scalar DateTime

type Query {
  getAllVerifications: [VerificationPayload!]!
}

type Mutation {
  createVerification(input: CreateVerificationInput!): VerificationPayload!
  signUp(input: SignUpInput!): AuthPayload!
  logIn(input: LogInInput!): AuthPayload!
}

type Fingerprint {
  id: ID!
  type: String!
  side: String!
}

type User {
  id: ID!
  email: String!
  name: String
  history: [Verification!]!
}

type Verification {
  id: ID!
  firstFingerprint: Fingerprint!
  secondFingerprint: Fingerprint!
  match: Boolean!
  coincidence: Float!
  createdAt: DateTime!
}

# Payloads
type VerificationPayload {
  id: ID!
  firstFingerprint: Fingerprint!
  secondFingerprint: Fingerprint!
  match: Boolean!
  coincidence: Float!
  createdAt: DateTime!
}

type AuthPayload {
  token: String!
  user: User!
}

# Inputs
input CreateVerificationInput {
  firstFingerprint: FingerprintInput!
  secondFingerprint: FingerprintInput!
}

input FingerprintInput {
  type: String!
  side: String!
}

input SignUpInput {
  email: String!
  password: String!
  name: String
}

input LogInInput {
  email: String!
  password: String!
}