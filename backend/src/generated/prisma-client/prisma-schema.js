module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateComparison {
  count: Int!
}

type AggregateFingerprint {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Comparison {
  id: ID!
  firstFingerprint: Fingerprint!
  secondFingerprint: Fingerprint!
  match: Boolean!
  coincidence: Int!
  timestamp: DateTime!
}

type ComparisonConnection {
  pageInfo: PageInfo!
  edges: [ComparisonEdge]!
  aggregate: AggregateComparison!
}

input ComparisonCreateInput {
  id: ID
  firstFingerprint: FingerprintCreateOneInput!
  secondFingerprint: FingerprintCreateOneInput!
  match: Boolean!
  coincidence: Int!
  timestamp: DateTime!
}

type ComparisonEdge {
  node: Comparison!
  cursor: String!
}

enum ComparisonOrderByInput {
  id_ASC
  id_DESC
  match_ASC
  match_DESC
  coincidence_ASC
  coincidence_DESC
  timestamp_ASC
  timestamp_DESC
}

type ComparisonPreviousValues {
  id: ID!
  match: Boolean!
  coincidence: Int!
  timestamp: DateTime!
}

type ComparisonSubscriptionPayload {
  mutation: MutationType!
  node: Comparison
  updatedFields: [String!]
  previousValues: ComparisonPreviousValues
}

input ComparisonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ComparisonWhereInput
  AND: [ComparisonSubscriptionWhereInput!]
  OR: [ComparisonSubscriptionWhereInput!]
  NOT: [ComparisonSubscriptionWhereInput!]
}

input ComparisonUpdateInput {
  firstFingerprint: FingerprintUpdateOneRequiredInput
  secondFingerprint: FingerprintUpdateOneRequiredInput
  match: Boolean
  coincidence: Int
  timestamp: DateTime
}

input ComparisonUpdateManyMutationInput {
  match: Boolean
  coincidence: Int
  timestamp: DateTime
}

input ComparisonWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstFingerprint: FingerprintWhereInput
  secondFingerprint: FingerprintWhereInput
  match: Boolean
  match_not: Boolean
  coincidence: Int
  coincidence_not: Int
  coincidence_in: [Int!]
  coincidence_not_in: [Int!]
  coincidence_lt: Int
  coincidence_lte: Int
  coincidence_gt: Int
  coincidence_gte: Int
  timestamp: DateTime
  timestamp_not: DateTime
  timestamp_in: [DateTime!]
  timestamp_not_in: [DateTime!]
  timestamp_lt: DateTime
  timestamp_lte: DateTime
  timestamp_gt: DateTime
  timestamp_gte: DateTime
  AND: [ComparisonWhereInput!]
  OR: [ComparisonWhereInput!]
  NOT: [ComparisonWhereInput!]
}

input ComparisonWhereUniqueInput {
  id: ID
}

scalar DateTime

type Fingerprint {
  id: ID!
  type: String!
  side: String!
}

type FingerprintConnection {
  pageInfo: PageInfo!
  edges: [FingerprintEdge]!
  aggregate: AggregateFingerprint!
}

input FingerprintCreateInput {
  id: ID
  type: String!
  side: String!
}

input FingerprintCreateOneInput {
  create: FingerprintCreateInput
  connect: FingerprintWhereUniqueInput
}

type FingerprintEdge {
  node: Fingerprint!
  cursor: String!
}

enum FingerprintOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  side_ASC
  side_DESC
}

type FingerprintPreviousValues {
  id: ID!
  type: String!
  side: String!
}

type FingerprintSubscriptionPayload {
  mutation: MutationType!
  node: Fingerprint
  updatedFields: [String!]
  previousValues: FingerprintPreviousValues
}

input FingerprintSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FingerprintWhereInput
  AND: [FingerprintSubscriptionWhereInput!]
  OR: [FingerprintSubscriptionWhereInput!]
  NOT: [FingerprintSubscriptionWhereInput!]
}

input FingerprintUpdateDataInput {
  type: String
  side: String
}

input FingerprintUpdateInput {
  type: String
  side: String
}

input FingerprintUpdateManyMutationInput {
  type: String
  side: String
}

input FingerprintUpdateOneRequiredInput {
  create: FingerprintCreateInput
  update: FingerprintUpdateDataInput
  upsert: FingerprintUpsertNestedInput
  connect: FingerprintWhereUniqueInput
}

input FingerprintUpsertNestedInput {
  update: FingerprintUpdateDataInput!
  create: FingerprintCreateInput!
}

input FingerprintWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  side: String
  side_not: String
  side_in: [String!]
  side_not_in: [String!]
  side_lt: String
  side_lte: String
  side_gt: String
  side_gte: String
  side_contains: String
  side_not_contains: String
  side_starts_with: String
  side_not_starts_with: String
  side_ends_with: String
  side_not_ends_with: String
  AND: [FingerprintWhereInput!]
  OR: [FingerprintWhereInput!]
  NOT: [FingerprintWhereInput!]
}

input FingerprintWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createComparison(data: ComparisonCreateInput!): Comparison!
  updateComparison(data: ComparisonUpdateInput!, where: ComparisonWhereUniqueInput!): Comparison
  updateManyComparisons(data: ComparisonUpdateManyMutationInput!, where: ComparisonWhereInput): BatchPayload!
  upsertComparison(where: ComparisonWhereUniqueInput!, create: ComparisonCreateInput!, update: ComparisonUpdateInput!): Comparison!
  deleteComparison(where: ComparisonWhereUniqueInput!): Comparison
  deleteManyComparisons(where: ComparisonWhereInput): BatchPayload!
  createFingerprint(data: FingerprintCreateInput!): Fingerprint!
  updateFingerprint(data: FingerprintUpdateInput!, where: FingerprintWhereUniqueInput!): Fingerprint
  updateManyFingerprints(data: FingerprintUpdateManyMutationInput!, where: FingerprintWhereInput): BatchPayload!
  upsertFingerprint(where: FingerprintWhereUniqueInput!, create: FingerprintCreateInput!, update: FingerprintUpdateInput!): Fingerprint!
  deleteFingerprint(where: FingerprintWhereUniqueInput!): Fingerprint
  deleteManyFingerprints(where: FingerprintWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  comparison(where: ComparisonWhereUniqueInput!): Comparison
  comparisons(where: ComparisonWhereInput, orderBy: ComparisonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comparison]!
  comparisonsConnection(where: ComparisonWhereInput, orderBy: ComparisonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ComparisonConnection!
  fingerprint(where: FingerprintWhereUniqueInput!): Fingerprint
  fingerprints(where: FingerprintWhereInput, orderBy: FingerprintOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Fingerprint]!
  fingerprintsConnection(where: FingerprintWhereInput, orderBy: FingerprintOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FingerprintConnection!
  node(id: ID!): Node
}

type Subscription {
  comparison(where: ComparisonSubscriptionWhereInput): ComparisonSubscriptionPayload
  fingerprint(where: FingerprintSubscriptionWhereInput): FingerprintSubscriptionPayload
}
`
      }
    